day01

출력 메소드

				print() : 마지막에 자동으로 줄바꿈이 되지 않고 아래의 문장과 이어서 출력된다.
				println() : 마지막에 자동으로 줄바꿈된다. 
				printf() <- 이건 변수 배우고 시작!


출력메소드 -> 오류를 구체화 하기위해!

출력 메소드 목적

	전달받은 데이터 및 전달할 데이터 검사, 오류 발생 지점 구체화 및 검사

* 제어 문자 : 반드시 따옴표 안에서 작성한다

\n : new line, 줄바꿈, 개행문자
\t : tab, 위 아래 줄 간격 맞춰 띄기
\" : " 표현
\' : '표현
\\ : \ 표현

--------------------------------------------------------------------------------------

1. 변수
변수 :  저장공간
				x					=				10
				저장공간의					값(상수)
					이름

자료 형(type, 종류)

					자료형			type			byte			값
					 
					정수형			int			4				0, -123, 123, 242141521,...
					실수형			float		4				3.1F, 0.0F, 3.0F, -12.421F,...
										double		8				3.1, 0.0, 3.0, -12.421,...
					문자형			char			2				'a', '0', '한',...
					문자열			String		?				"a", "0.0", "한동석", "AVC",...

변수의 선언
					자료형 변수명 = 초기값;
					초기값을 넣는 작업을 초기화

변수의 사용
				int data = 20; //저장공간




변수 선언 시 주의 사항
					1. 같은 이름의 변수로 선언할 수 없다.
					2. 초기화를 해준다
					3. 되도록 선언부에 한꺼번에 선언한다(영역 상단).
					


변수명 주의사항

			문자로 시작해야 한다.
			특수문자는 사용할 수 없다.  단, _는 허용한다.
			되도록 소문자만 사용한다.
			공백을 사용할 수 없다.


			goodBoy : 카멜 표기법(java)
			good_boy : 파스칼 표기법, 스네이크 표기법, 팟홀 표기법 (DB)

			되도록 한글은 사용하지 않는다.
			명사로 사용한다.
			뜻이 있는 단어를 사용한다.
			a, b, c, d, e,...(x)
			data, number, num, age, name,...(o)




변수를 사용하는 이유
					1. 반복되는 값을 쉽게 관리할 수 있다.
					2. 의미 없는 값을 하나의 정보로 만들기 위해서 사용한다(자료구조)


* RAM (메모리)

==================
OS kernel space      : 		드라이버
==================
Stack        					: 		지역변수, 매개변수
==================
Heap       				  : 		동적 메모리
==================
BSS         					: 		직접 초기화되지 않은 전역변수
==================
Data 영역      					: 		전역변수, 정적변수
==================
Text 영역      					: 		상수, 코드
==================


												int x = 10;
												x라는 이름의 저장공간이 RAM에 할당되고 10이라는 값이 들어간다

* 주소
												int x = 10;
												x라는 이름의 저장공간이 RAM에 할당되면 고유한 값인 주소값이 부여된다.
												계속 실행되거나 종료되는 프로그램이 있기 때문에, 주소값은 변경될 수 있으나
												중복은 없다.

2. 서식문자 (printf 출력메소드 : 서식문자를 사용하여 출력할 수 있으며, 자동으로 줄바꿈되지 않는다.)

서식문자(format) - printf(f, format)
								반드시 따옴표 안에서 작성한다.
								

								%d				decimal(10진수 정수)
								%o				octal(8진수 정수)
								%x				hexadecimal(16진수 정수)
								%f				flaot(실수)
								%c				character(문자)
								%s				string(문자열)

3. 상수

		항상 그대로인 수.
			값을 변경할 수 없도록 한다.

			final 자료형 상수명 = 값;

4. 형변환

				- 자동 형변환
									정수 + 정수 = 정수
									정수 + 실수 = 실수
									3	  + 0.0 = 3.0


									문자 + 정수 = 정수
									
				
				- 강제 형변환
									(자료형)값
									(double)3

문자열 형변환
					1. 다른 자료형을 문자열로
							문자열과 다른 일반 자료형을 연결하면 결과는 항상 문자열이 된다.

					2. 문자열을 다른 자료형으로
							일반 자료형은 일반 자료형끼리만 형변환이 가능하다.
							문자열 타입은 클래스타입이므로, 일반 자료형의 클래스 타입의 도움을 받아야 한다.
							Integer.parseInt(""); => 문자열에서 변환된 정수값
							Float.parseFloat("");	=> 문자열에서 변환된 실수값(Float)
							Double.parseDouble("");	=> 문자열에서 변환된 실수값(Double)

5. 입력

입력
				커서가 깜빡이고 있는 상태.
				입력하기 전에 출력을 통해 어떤 값을 입력해야할 지 사용자에게 알려주어야 한다.

입력 클래스
					Scanner sc = new Scanner(System.in);
					ctrl + shift + o : inport 추가 



입력 메소드(콘솔창에서 커서를 깜빡여주기 위해 사용)
					next()	:	사용자가 입력한 문자열 값
									- 사용자가 입력한 값 중 공백 또는 줄바꿈 문자를 구분점으로 각 문자열을 분리한다.
									- 첫 번째 문자열을 첫 번째 next()에 담고
										두 번째 문자열은 두 번째 next()에 담는다.


					nextLine()	:	사용자가 입력한 문자열 값
										- 공백 또는 줄바꿈 문자도 값으로 취급하기 때문에 그대로 입력 받는다.
										
6. 연산자

연산자
			기능이 있는 특수문자

*****연산자의 우선순위
					최우선 연산자
					단항 연산자
					산술 연산자
					쉬프트 연산자
					관계 연산자
				논리 연산자
					삼항 연산자
					대입 연산자


결합성

				하나의 수식에 동일한 연산자가 여러 개 사용되면 알맞은 방향으로 결합되어
				연산되는 성질

비트 연산
				논리 연산자
								&	(AND, 논리곱), A & B, 두 비트가 모두 1이면 1
								|	(OR,	논리합), A | B, 둘 중 하나라도 1이면 1
								^	(XOR,	배타논리합), A ^ B, 두 비트가 서로 달라야 1
				단항 연산자
									~ (NOT, 논리부정), ~A, 0은 1로 1은 0으로 변경, ~a = -a-1
									
				쉬프트 연산자(이동)
									<< (LEFT SHIFT, 좌쉬프트), A << B, A를 왼쪽으로 B만큼 비트이동
									>> (RIGHT SHIFT, 우쉬프트), A >> B, A를 오른쪽으로 B만큼 비트이동
조건식 

				결과가 참 또는 거짓, 둘 중 하나가 나오는 식

				관계 연산자
									==				:	같다
									!=				:	같지 않다
									>, <			:	초과,	미만
									>=, <=		:	이상,	이하
				논리 연산자
									&&, A && B, 두 조건식 모두 참이면 참
									||, A || B, 둘 중 하나라도 참이면 참
				단항 연산자
									!(NOT), !A, 조건식이 참이면 거짓으로, 거짓이면 참으로 변경

삼항 연산자( : ? ) : 값으로 봐야한다!
		조건식 ?  참 : 거짓
		단, 참 과 거짓 자리에는 값만 작성할 수 있다!

삼항 연산자를 사용할 때

					조건식이 단 한개만 존재할 때 사용한다.
대입 연산자(복합 대입 연산자, 누적 연산자)
					+=, -=, /=, *=, %=,...
					

						int money 10000;
						//money - 1000;
						money -= 1000;
						System.out.println(money);

						int data = 10;
						//data = data + 1;
					  //data += 1
							data++
						System.out.println(data);
								



증감 연산자

						++,(1만큼증가)  --,(1만큼 감소)

						전위형	:	해당 라인부터 바로 적용
									++data
						후위형	:	다음 라인부터 적용
									data++

7. 논리형 (boolean)

논리형(boolean)
							참	:	true
							거짓	: false

논리형		boolean					1byte			true,false

8. 제어문


제어문

				조건문

								if문
										

								위 조건식에 상관없이 모두 검사
								if(조건식 ) {
                             실행할 문장;
                              }
								if(조건식 ) {
                             실행할 문장;
                              }
								if(조건식 ) {
                             실행할 문장;
                              }


---------------------------------------------------
								if(조건식 ) {
                             실행할 문장;
                              }...
								위 조건식이 참이 아니면 다음 조건식 검사, 참이면 다음 조건식들은 검사하지 않는다.
								else	if(조건식 ) {
                             실행할 문장;
                              }
								else	if(조건식 ) {
                             실행할 문장;
                              }
								else	if(조건식 ) {
                             실행할 문장;
                              }
								else	if(조건식 ) {
                             실행할 문장;
                              }
								else	{
                             실행할 문장;
                              }...



							
								switch문


								switch(변수명){
								case 값1:
												실행할 문장;
												break;
								case 값2:
												실행할 문장;
												break;
								case 값3:
												실행할 문장;
												break;
								case 값4:
												실행할 문장;
												break;
								case 값5:
												실행할 문장;
												break;
								case 값6:
												실행할 문장;
												break;
								....
								default:
												실행할 문장;
												break;(생략가능 하지만 c#언어는 생략한다면 오류가뜨기떄문)
								}
 * 삼항 연산자, if문 switch문의 비교
						삼항 연산자 : 조건식이 1개 있을 경우 사용
						if문 : 조건식에 비교 (>, <, >=, <=)연산자를 사용하거나, 여러 개의 조건식을
						논리 연산자(&&, ||)로 연결할 때 사용
						switch문 : 하나의 변수에 여러 개의 값이 담길 수 있고, 각 값이 같은 지를 비교할때
						사용

9. 반복문

반복문

						▷ for


	

			int 1 = 0;		i<10		i+1
			for (초기식; 조건식; 증감식){
										실행할 문장;
			}

			1. 초기식
			2. 조건식
			3. 실행할 문장
			4. 증감식
			5. 조건식
			6. 실행할 문장
			7. 증감식
			8. 조건식
			9. 실행할 문장
			...

10. 실습!

